{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","App/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","App/store.ts","components/Header/Header.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","App/App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","TaskStatuses","TaskPriorities","ResultsCode","instance","axios","create","withCredentials","baseURL","headers","todolistsAPI","get","title","post","id","delete","put","taskAPI","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","status","handleServerNetworkError","err","message","authSlice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","action","payload","value","authReducer","reducer","actions","appSlice","initialized","setAppInitializedAC","appReducer","todolistsSlice","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","clearState","todolistsReducer","fetchTask","createAsyncThunk","thunkAPI","res","tasks","items","taskSlice","removeTaskAC","t","addTaskAC","task","todoListId","updateTaskAC","extraReducers","builder","addCase","forEach","fulfilled","tasksReducer","updateTaskTC","getState","a","find","warn","apiModel","description","priority","startDate","deadline","resultCode","OK","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","header","background","toolbar","display","justifyContent","Header","classes","useSelector","useDispatch","logoutHandler","useCallback","className","AppBar","position","Toolbar","IconButton","edge","color","Button","onClick","href","rel","target","style","AddItemForm","React","memo","addItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","addNewTask","trimmedNewTaskTitle","trim","TextField","onChange","event","currentTarget","onKeyPress","key","variant","label","helperText","ControlPoint","EditableSpan","props","titleForSpan","editMode","setEditMode","setTitle","activateEditMode","activateViewMode","onBlur","e","autoFocus","onDoubleClick","Task","removeTask","removeTaskTC","changeStatusHandler","checked","Completed","New","changeTaskTitleHandler","newTitle","Checkbox","Delete","Todolist","useEffect","filterClickHandler","filterValue","activeClassButton","filterStatus","removeTodoList","removeTodolistTC","addTaskForTodoList","todolistID","item","addTaskTC","changeTodoListTitle","changeTodolistTitleTC","GetTaskForTodoList","filteredTasks","getFilteredTasks","minHeight","TodolistsList","addTodoListForm","addTodolistTC","Grid","container","padding","alignItems","Paper","elevation","to","Alert","ErrorSnackbar","handleClose","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","test","password","initialValues","rememberMe","onSubmit","justify","height","handleSubmit","backgroundColor","borderRadius","FormControl","FormLabel","lineHeight","fontSize","FormGroup","getFieldProps","errors","margin","type","FormControlLabel","control","width","handleReset","App","isInitialized","LinearProgress","Container","fixed","exact","path","render","CircularProgress","size","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3b077607.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      console.log('run3')\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    console.log('run2')\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      console.log(swUrl)\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\n\n/**\n * Api\n */\nconst instance = axios.create({\n   withCredentials: true,\n   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n   headers: {\n      'API-KEY': '3928f52f-fe0d-4ea9-97d7-8b764f267e74'\n   },\n});\n\nexport const todolistsAPI = {\n   getTodolist() {\n      return instance.get<TodolistType[]>('todo-lists')\n   },\n   createTodolist(title: string) {\n      return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\n   },\n   deleteTodolist(id: string) {\n      return instance.delete<ResponseType>(`todo-lists/${id}`)\n   },\n   updateTodolistTitle(id: string, title: string) {\n      return instance.put<ResponseType>(`todo-lists/${id}`, {title})\n   }\n}\n\nexport const taskAPI = {\n   getTasks(todolistId: string) {\n      return instance.get<GetTaskResponse>(`todo-lists/${todolistId}/tasks`)\n   },\n   createTask(todolistId: string, title: string) {\n      return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\n   },\n   deleteTask(todolistId: string, taskId: string) {\n      return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\n   },\n   updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n      return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n   }\n}\n\nexport const authAPI = {\n   auth(data: LoginParamsType) {\n      return instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\n   },\n   me() {\n      return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\n   },\n   logout() {\n      return instance.delete<ResponseType>('auth/login')\n   }\n}\n\n\n\n/**\n * Types\n */\nexport enum TaskStatuses {\n   New = 0,\n   InProgress = 1,\n   Completed = 2,\n   Draft = 3\n}\nexport enum TaskPriorities {\n   low = 0,\n   Middle = 1,\n   Hi = 2,\n   Urgently = 3,\n   Later = 4\n}\nexport type TodolistType = {\n   id: string,\n   title: string,\n   addedDate: string,\n   order: number\n}\nexport type TaskType = {\n   description: string\n   title: string\n   status: TaskStatuses\n   priority: TaskPriorities\n   startDate: string\n   deadline: string\n   id: string\n   todoListId: string\n   order: number\n   addedDate: string\n}\nexport type UpdateTaskModelType = {\n   title: string\n   description: string\n   status: TaskStatuses\n   priority: TaskPriorities\n   startDate: string\n   deadline: string\n}\ntype GetTaskResponse = {\n   error: string | null\n   totalCount: number\n   items: TaskType[]\n}\nexport type ResponseType<D = {}> = {\n   fieldsErrors: string[]\n   resultCode: ResultsCode\n   messages: string[]\n   data: D\n}\nexport enum ResultsCode {\n   OK = 0,\n   ERROR= 1\n}\nexport type LoginParamsType = {\n   email: string\n   password: string\n   rememberMe: boolean\n   captcha?: string\n}","import {setAppErrorAC, setAppStatusAC} from \"../App/app-reducer\";\nimport {ResponseType} from \"../api/todolists-api\";\nimport {Dispatch} from \"redux\";\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\n   if (data.messages.length) {\n      dispatch(setAppErrorAC({error: data.messages[0]}))\n   } else {\n      dispatch(setAppErrorAC({error: 'Some error occurred'}))\n   }\n   dispatch(setAppStatusAC({status: 'failed'}));\n }\n\n export const handleServerNetworkError = (err: { message: string}, dispatch: Dispatch) => {\n    dispatch(setAppErrorAC({error: err.message ? err.message : 'Some error occurred'}))\n    dispatch(setAppStatusAC({status: 'failed'}));\n }","import {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {setAppStatusAC} from \"../../App/app-reducer\";\nimport {authAPI, LoginParamsType, ResultsCode} from \"../../api/todolists-api\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {AppThunkType} from \"../../App/store\";\nimport {clearState} from \"../TodolistsList/todolists-reducer\";\n\nconst initialState = {\n   isLoggedIn: false\n}\n\nconst authSlice = createSlice({\n   name: 'auth',\n   initialState: initialState,\n   reducers: {\n      setIsLoggedInAC: (state, action: PayloadAction<ActionPayloadType>) => {\n         state.isLoggedIn = action.payload.value\n      },\n   },\n})\nexport const authReducer = authSlice.reducer;\nexport const {setIsLoggedInAC} = authSlice.actions;\n/**\n * Thunk Creator\n */\nexport const loginTC = (data: LoginParamsType): AppThunkType => async dispatch  => {\n   dispatch(setAppStatusAC({status: 'loading'}));\n   try {\n      const res = await authAPI.auth(data);\n      if (res.data.resultCode === ResultsCode.OK) {\n         dispatch(setIsLoggedInAC({value: true}));\n      } else {\n         handleServerAppError(res.data, dispatch);\n      }\n   } catch (err) {\n      handleServerNetworkError(err, dispatch);\n   } finally {\n      dispatch(setAppStatusAC({status: 'succeeded'}));\n   }\n};\nexport const logoutTC = ():AppThunkType => async dispatch => {\n   dispatch(setAppStatusAC({status: 'loading'}));\n   try {\n      const res = await authAPI.logout()\n      if (res.data.resultCode === ResultsCode.OK) {\n         dispatch(setIsLoggedInAC({value: false}));\n      } else {\n         handleServerAppError(res.data, dispatch);\n      }\n   } catch (err) {\n      handleServerNetworkError(err, dispatch);\n   } finally {\n      dispatch(setAppStatusAC({status: 'succeeded'}));\n      dispatch(clearState())\n   }\n}\n/**\n * Types\n */\ntype ActionPayloadType = {\n   value: boolean\n}\n","import {authAPI, ResultsCode} from \"../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {AppThunkType} from \"./store\";\n\nconst initialState: InitialStateType = {\n   status: 'idle',\n   error: null,\n   initialized: false\n}\n\nconst appSlice = createSlice({\n   name: 'app',\n   initialState: initialState,\n   reducers: {\n      setAppErrorAC: (state, action: PayloadAction<SetAppErrorPayloadType>) => {\n         state.error = action.payload.error;\n      },\n      setAppStatusAC: (state, action: PayloadAction<SetAppStatusPayloadType>) => {\n         state.status = action.payload.status;\n      },\n      setAppInitializedAC: (state, action: PayloadAction<SetAppInitPayloadType>) => {\n         state.initialized = action.payload.value;\n      }\n   }\n})\n\nexport const appReducer = appSlice.reducer;\nexport const {setAppStatusAC, setAppInitializedAC, setAppErrorAC} = appSlice.actions;\n/**\n * Thunk Creator\n */\nexport const initializedAppTC = (): AppThunkType => async dispatch => {\n   try {\n      const res = await authAPI.me()\n      dispatch(setAppInitializedAC({value: true}));\n      if (res.data.resultCode === ResultsCode.OK) {\n         dispatch(setIsLoggedInAC({value: true}))\n      } else {\n         handleServerAppError(res.data, dispatch)\n      }\n   } catch (err) {\n      handleServerNetworkError(err, dispatch);\n   }\n}\n/**\n * Types\n */\ntype SetAppErrorPayloadType = { error: string | null}\ntype SetAppStatusPayloadType = { status: RequestStatusType}\ntype SetAppInitPayloadType = {value: boolean};\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type InitialStateType = {\n   status: RequestStatusType\n   error: string | null\n   initialized: boolean\n}\n","import {ResultsCode, todolistsAPI, TodolistType} from \"../../api/todolists-api\";\nimport {AppThunkType} from \"../../App/store\";\nimport {RequestStatusType, setAppStatusAC} from \"../../App/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\nconst initialState: TodolistDomainType[] = [];\n\nconst todolistsSlice = createSlice({\n  name: 'todolists',\n  initialState,\n  reducers: {\n    removeTodolistAC: (state, action: PayloadAction<RemoveTodolistPayloadType>) => {\n      const index = state.findIndex(tl => tl.id === action.payload.todolistId);\n      state.splice(index, 1);\n    },\n    addTodolistAC: (state, action: PayloadAction<AddTodolistPayloadType>) => {\n      state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"});\n    },\n    changeTodolistTitleAC: (state, action: PayloadAction<ChangeTodolistTitlePayloadType>) => {\n      const index = state.findIndex(tl => tl.id === action.payload.todolistId);\n      state[index].title = action.payload.title;\n    },\n    changeTodolistFilterAC: (state, action: PayloadAction<ChangeTodolistFilterPayloadType>) => {\n      const index = state.findIndex(tl => tl.id === action.payload.todolistId);\n      state[index].filter = action.payload.filter;\n    },\n    changeTodolistEntityStatusAC: (state, action: PayloadAction<ChangeTodolistEntityStatusPayloadType>) => {\n      const index = state.findIndex(tl => tl.id === action.payload.todolistId);\n      state[index].entityStatus = action.payload.status;\n    },\n    setTodolistsAC: (state, action: PayloadAction<SetTodolistsPayloadType>) => {\n      return action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}));\n    },\n    clearState: () => {\n      return {\n        ...initialState\n      }\n    }\n  }\n})\n\nexport const todolistsReducer = todolistsSlice.reducer;\nexport const {\n  removeTodolistAC,\n  addTodolistAC,\n  changeTodolistTitleAC,\n  changeTodolistFilterAC,\n  changeTodolistEntityStatusAC,\n  setTodolistsAC,\n  clearState\n} = todolistsSlice.actions;\n\n/**\n * Thunk Creator\n */\nexport const fetchTodolistsTC = (): AppThunkType => async dispatch => {\n  dispatch(setAppStatusAC({status: 'loading'}));\n  try {\n    const res = await todolistsAPI.getTodolist();\n    dispatch(setTodolistsAC({todolists: res.data}));\n  } catch (err) {\n    handleServerNetworkError(err, dispatch)\n  } finally {\n    dispatch(setAppStatusAC({status: 'succeeded'}));\n  }\n}\nexport const addTodolistTC = (title: string): AppThunkType => async dispatch => {\n  dispatch(setAppStatusAC({status: 'loading'}));\n  try {\n    const res = await todolistsAPI.createTodolist(title);\n    if (res.data.resultCode === ResultsCode.OK) {\n      dispatch(addTodolistAC({todolist: res.data.data.item}));\n    } else {\n      handleServerAppError(res.data, dispatch)\n    }\n  } catch (err) {\n    handleServerNetworkError(err, dispatch)\n  } finally {\n    dispatch(setAppStatusAC({status: 'succeeded'}));\n  }\n}\nexport const removeTodolistTC = (todolistId: string): AppThunkType => async dispatch => {\n  dispatch(setAppStatusAC({status: 'loading'}));\n  dispatch(changeTodolistEntityStatusAC({todolistId, status: 'loading'}));\n  try {\n    const res = await todolistsAPI.deleteTodolist(todolistId);\n    if (res.data.resultCode === ResultsCode.OK) {\n      dispatch(removeTodolistAC({todolistId: todolistId}));\n    } else {\n      handleServerAppError(res.data, dispatch)\n    }\n  } catch (err) {\n    handleServerNetworkError(err, dispatch)\n  } finally {\n    dispatch(setAppStatusAC({status: 'succeeded'}));\n  }\n}\nexport const changeTodolistTitleTC = (todolistId: string, title: string): AppThunkType => async dispatch => {\n  dispatch(setAppStatusAC({status: 'loading'}));\n  try {\n    const res = await todolistsAPI.updateTodolistTitle(todolistId, title);\n    if (res.data.resultCode === ResultsCode.OK) {\n      dispatch(changeTodolistTitleAC({todolistId, title}));\n    } else {\n      handleServerAppError(res.data, dispatch)\n    }\n  } catch (err) {\n    handleServerNetworkError(err, dispatch)\n  } finally {\n    dispatch(setAppStatusAC({status: 'succeeded'}));\n  }\n}\n\n/**\n * Types\n */\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n  filter: FilterValuesType\n  entityStatus: RequestStatusType\n}\n\nexport type RemoveTodolistPayloadType = { todolistId: string }\nexport type AddTodolistPayloadType = { todolist: TodolistType }\ntype ChangeTodolistTitlePayloadType = { todolistId: string, title: string }\ntype ChangeTodolistFilterPayloadType = { todolistId: string, filter: FilterValuesType }\ntype ChangeTodolistEntityStatusPayloadType = { todolistId: string, status: RequestStatusType }\nexport type SetTodolistsPayloadType = { todolists: TodolistType[] }\n\n\n\n","import {ResultsCode, taskAPI, TaskPriorities, TaskStatuses, TaskType} from \"../../api/todolists-api\";\nimport {addTodolistAC, clearState, removeTodolistAC, setTodolistsAC} from \"./todolists-reducer\";\nimport {AppThunkType} from \"../../App/store\";\nimport {setAppStatusAC} from \"../../App/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport const fetchTask = createAsyncThunk(\n  'tasks/fetchTask',\n  (todolistId: string, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}));\n    return taskAPI.getTasks(todolistId)\n      .then((res) => {\n        const tasks = res.data.items\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\n        return {tasks, todolistId}\n      })\n  })\n\nconst taskSlice = createSlice({\n  name: 'tasks',\n  initialState: {} as TasksStateType,\n  reducers: {\n    removeTaskAC: (state, action: PayloadAction<RemoveTaskPayloadType>) => {\n      const index = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId);\n      state[action.payload.todolistId].splice(index, 1);\n    },\n    addTaskAC: (state, action: PayloadAction<AddTaskPayloadType>) => {\n      state[action.payload.task.todoListId].unshift(action.payload.task);\n    },\n    updateTaskAC: (state, action: PayloadAction<UpdateTaskPayloadType>) => {\n      const task = state[action.payload.todolistId];\n      const index = task.findIndex(t => t.id === action.payload.taskId);\n      task[index] = {...task[index], ...action.payload.model};\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(addTodolistAC, (state, action) => {\n      state[action.payload.todolist.id] = [];\n    })\n      .addCase(removeTodolistAC, (state, action) => {\n        delete state[action.payload.todolistId];\n      })\n      .addCase(setTodolistsAC, (state, action) => {\n        action.payload.todolists.forEach(tl => state[tl.id] = []);\n      })\n      .addCase(clearState, () => {\n        return {} as TasksStateType\n      })\n      .addCase(fetchTask.fulfilled, (state, action) => {\n        state[action.payload.todolistId] = action.payload.tasks;\n      })\n  }\n})\n\nexport const tasksReducer = taskSlice.reducer\nexport const {\n  removeTaskAC,\n  addTaskAC,\n  updateTaskAC,\n} = taskSlice.actions;\n/**\n * Thunk Creator\n */\n\nexport const removeTaskTC = (taskId: string, todolistId: string): AppThunkType => async dispatch => {\n  dispatch(setAppStatusAC({status: 'loading'}));\n  try {\n    const res = await taskAPI.deleteTask(todolistId, taskId);\n    if (res.data.resultCode === ResultsCode.OK) {\n      dispatch(removeTaskAC({taskId, todolistId}));\n    } else {\n      handleServerAppError(res.data, dispatch);\n    }\n  } catch (err) {\n    handleServerNetworkError(err, dispatch);\n  } finally {\n    dispatch(setAppStatusAC({status: 'succeeded'}));\n  }\n}\nexport const addTaskTC = (title: string, todolistID: string): AppThunkType => async dispatch => {\n  dispatch(setAppStatusAC({status: 'loading'}));\n  try {\n    const res = await taskAPI.createTask(todolistID, title);\n    if (res.data.resultCode === ResultsCode.OK) {\n      dispatch(addTaskAC({task: res.data.data.item}));\n    } else {\n      handleServerAppError(res.data, dispatch);\n    }\n  } catch (err) {\n    handleServerNetworkError(err, dispatch);\n  } finally {\n    dispatch(setAppStatusAC({status: 'succeeded'}));\n  }\n}\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string): AppThunkType =>\n  async (dispatch,\n         getState) => {\n    dispatch(setAppStatusAC({status: 'loading'}));\n    try {\n      const state = getState();\n      const task = state.tasks[todolistId].find(t => t.id === taskId);\n      if (!task) {\n        console.warn('Task not found in the state');\n        return;\n      }\n      const apiModel = {\n        title: task.title,\n        description: task.description,\n        status: task.status,\n        priority: task.priority,\n        startDate: task.startDate,\n        deadline: task.deadline,\n        ...model\n      }\n      const res = await taskAPI.updateTask(todolistId, taskId, apiModel)\n      if (res.data.resultCode === ResultsCode.OK) {\n        dispatch(updateTaskAC({taskId, model, todolistId}));\n      } else {\n        handleServerAppError(res.data, dispatch)\n      }\n    } catch (err) {\n      handleServerNetworkError(err, dispatch)\n    } finally {\n      dispatch(setAppStatusAC({status: 'succeeded'}));\n    }\n  }\n\n/**\n * types\n */\ntype RemoveTaskPayloadType = { taskId: string, todolistId: string }\ntype AddTaskPayloadType = { task: TaskType }\ntype UpdateTaskPayloadType = { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }\n\nexport type TasksStateType = {\n  [key: string]: TaskType[]\n};\n\ntype UpdateDomainTaskModelType = {\n  title?: string\n  description?: string\n  status?: TaskStatuses\n  priority?: TaskPriorities\n  startDate?: string\n  deadline?: string\n};\n","import {combineReducers} from \"redux\";\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\nimport thunk, {ThunkAction} from \"redux-thunk\";\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\nimport {Action, configureStore} from \"@reduxjs/toolkit\";\n\nconst rootReducer = combineReducers({\n   todolists: todolistsReducer,\n   tasks: tasksReducer,\n   app: appReducer,\n   auth: authReducer\n});\n\nexport const store = configureStore({\n   reducer: rootReducer,\n   middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\n})\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n\nexport type AppThunkType = ThunkAction<void, AppRootStateType, unknown, Action<string>>\n\n","import React, {useCallback} from 'react';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logoutTC} from \"../../features/Login/auth-reducer\";\nimport {AppRootStateType} from \"../../App/store\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         flexGrow: 1,\n      },\n      menuButton: {\n         marginRight: theme.spacing(2),\n      },\n      header: {\n         background: 'linear-gradient(90deg, rgba(43,86,123,1) 0%, rgba(66,123,172,1) 43%, rgba(93,151,200,1) 100%)'\n      },\n      toolbar: {\n         display: 'flex',\n         justifyContent: 'space-between'\n      }\n   }),\n);\n\nexport const Header: React.FC = () => {\n   const classes = useStyles();\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n   const dispatch = useDispatch();\n\n   const logoutHandler = useCallback(() => {\n      dispatch(logoutTC());\n   },[dispatch])\n\n   return (\n      <div className={classes.root}>\n         <AppBar position=\"static\" className={classes.header}>\n            <Toolbar className={classes.toolbar}>\n               <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                  <MenuIcon/>\n               </IconButton>\n               {isLoggedIn\n                  ? <Button onClick={logoutHandler} color=\"inherit\">Log out</Button>\n                  : <Button color=\"inherit\"><a href={'https://social-network.samuraijs.com/'}\n                                               rel={'noreferrer'}\n                                               target={'_blank'}\n                                               style={{color: 'inherit'}}> Registration\n                  </a></Button>\n               }\n            </Toolbar>\n         </AppBar>\n      </div>\n   )\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {ControlPoint} from \"@material-ui/icons\";\n\nexport type AddItemFormPropsType = {\n   addItem: (title: string) => void\n   disabled?: boolean\n}\n\n\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo ( ({addItem, disabled}) => {\n   const [newTaskTitle, setNewTaskTitle] = useState('');\n   const [error, setError] = useState<string | null>(null);\n\n   const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n      setNewTaskTitle(event.currentTarget.value);\n   };\n   const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n      if (error !== null) {\n         setError(null);\n      }\n      if (event.key === 'Enter') {\n         addNewTask();\n      }\n   };\n   const addNewTask = () => {\n      const trimmedNewTaskTitle = newTaskTitle.trim();\n      if (trimmedNewTaskTitle) {\n         addItem(trimmedNewTaskTitle)\n      } else {\n         setError('Title is required')\n      }\n      setNewTaskTitle('');\n   };\n\n   return (\n      <div>\n         <TextField\n            error={!!error}\n            value={newTaskTitle}\n            onChange={onChangeHandler}\n            onKeyPress={onKeyPressHandler}\n            variant={\"outlined\"}\n            label={'Type value'}\n            helperText={error}\n            disabled={disabled}\n         />\n         <IconButton onClick={addNewTask} color={\"primary\"} disabled={disabled}>\n            <ControlPoint/>\n         </IconButton>\n      </div>\n   )\n});","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanPropsType = {\n   titleForSpan: string\n   onChange: (newValue: string) => void\n}\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\n   const {titleForSpan, onChange} = props;\n\n   const [editMode, setEditMode] = useState(false);\n   const [title, setTitle] = useState('');\n\n   const activateEditMode = useCallback(() => {\n      console.log('run')\n      setEditMode(true);\n      setTitle(titleForSpan);\n   }, [titleForSpan]);\n\n   const activateViewMode = useCallback(() => {\n      if (title.trim()) {\n         setEditMode(false);\n         onChange(title);\n      }\n   },[onChange, title]);\n   const onChangeTitleSpanHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value);\n\n   const onKeyPressEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter') {\n         activateViewMode();\n      }\n   };\n\n   return (\n      editMode\n         ? <TextField\n            onBlur={activateViewMode}\n            value={title}\n            onChange={onChangeTitleSpanHandler}\n            autoFocus\n            onKeyPress={onKeyPressEnterHandler}\n         />\n         : <span onDoubleClick={activateEditMode}>{titleForSpan}</span>\n   )\n});","import React, {ChangeEvent, useCallback} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {removeTaskTC, updateTaskTC} from \"../../tasks-reducer\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\n\n\nexport type TaskPropsType = {\n   task: TaskType\n   todolistId: string\n}\n\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\n\n   const {task, todolistId} = props;\n\n   const dispatch = useDispatch();\n\n   const removeTask = useCallback(() => {\n      return dispatch(removeTaskTC(task.id, todolistId))\n      }, [dispatch, task.id, todolistId]);\n\n   const changeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n      const newTaskIsDone = e.currentTarget.checked;\n      const status = newTaskIsDone ? TaskStatuses.Completed : TaskStatuses.New;\n      dispatch(updateTaskTC(task.id, {status}, todolistId));\n   }, [dispatch, task.id, todolistId]);\n\n   const changeTaskTitleHandler = useCallback((newTitle: string) => {\n      dispatch(updateTaskTC(task.id, {title: newTitle}, todolistId));\n   }, [dispatch, task.id, todolistId]);\n\n\n   return (\n      <li >\n         <Checkbox\n            checked={task.status === TaskStatuses.Completed}\n            onChange={changeStatusHandler}\n         />\n         <EditableSpan titleForSpan={task.title} onChange={changeTaskTitleHandler}/>\n         <IconButton onClick={removeTask}>\n            <Delete/>\n         </IconButton>\n      </li>\n   )\n});","import React, {useCallback, useEffect} from \"react\";\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../App/store\";\nimport {addTaskTC, fetchTask} from \"../tasks-reducer\";\nimport {Task} from \"./Task/Task\";\nimport {\n   changeTodolistFilterAC,\n   changeTodolistTitleTC,\n   FilterValuesType,\n   removeTodolistTC, TodolistDomainType\n} from \"../todolists-reducer\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\n\nexport type TodoListPropsType = {\n   todolist: TodolistDomainType\n}\n\nexport const Todolist: React.FC<TodoListPropsType> = React.memo(({todolist}) => {\n\n   const {id: todolistId, filter, title, entityStatus} = todolist\n\n   const dispatch = useDispatch();\n   const tasks = useSelector<AppRootStateType, TaskType[]>(state => state.tasks[todolistId]);\n\n   useEffect(() => {\n      dispatch(fetchTask(todolistId))\n      // eslint-disable-next-line\n   }, []);\n\n\n   const filterClickHandler = useCallback((filterValue: FilterValuesType) => {\n      switch (filterValue) {\n         case \"all\":\n            dispatch(changeTodolistFilterAC({todolistId, filter: \"all\"}));\n            break;\n         case \"active\":\n            dispatch(changeTodolistFilterAC({todolistId, filter: 'active'}));\n            break;\n         case \"completed\":\n            dispatch(changeTodolistFilterAC({todolistId, filter: 'completed'}));\n            break;\n      }\n   }, [todolistId, dispatch]);\n\n   const activeClassButton = useCallback((filterStatus: FilterValuesType) => {\n      return filter === filterStatus ? 'contained' : 'text';\n   }, [filter]);\n\n   const removeTodoList = useCallback((todolistId: string) => {\n      dispatch(removeTodolistTC(todolistId));\n   }, [dispatch]);\n\n   const addTaskForTodoList = useCallback((title: string) => {\n      dispatch(addTaskTC(title, todolistId));\n   }, [dispatch, todolistId]);\n\n   const changeTodoListTitle = useCallback((newTitle: string) => {\n      dispatch(changeTodolistTitleTC(todolistId, newTitle));\n   }, [dispatch, todolistId]);\n\n   const getFilteredTasks = useCallback(() => {\n      const filteredTasks = tasks\n      switch (filter) {\n         case \"active\":\n            return filteredTasks.filter(t => t.status === TaskStatuses.New);\n         case \"completed\":\n            return filteredTasks.filter(t => t.status === TaskStatuses.Completed);\n         default:\n            return filteredTasks;\n      }\n   }, [filter, tasks]);\n   const GetTaskForTodoList = getFilteredTasks()\n\n   return (\n      <div>\n         <h3>\n            <EditableSpan titleForSpan={title} onChange={changeTodoListTitle}/>\n            <IconButton onClick={() => removeTodoList(todolistId)} disabled={entityStatus === 'loading'}>\n               <Delete/>\n            </IconButton>\n         </h3>\n         <AddItemForm addItem={addTaskForTodoList} disabled={entityStatus === 'loading'}/>\n         <ul style={{minHeight: '250px'}}>\n            {\n               GetTaskForTodoList.map(t => {\n                  return <Task\n                     todolistId={todolistId}\n                     task={t}\n                     key={t.id}\n                  />\n               })\n            }\n         </ul>\n         <div>\n            <Button\n               variant={activeClassButton(\"all\")}\n               onClick={() => filterClickHandler('all')}>All\n            </Button>\n            <Button\n               color={\"primary\"}\n               variant={activeClassButton(\"active\")}\n               onClick={() => filterClickHandler('active')}>Active\n            </Button>\n            <Button\n               color={\"secondary\"}\n               variant={activeClassButton(\"completed\")}\n               onClick={() => filterClickHandler('completed')}>Completed\n            </Button>\n         </div>\n      </div>\n   );\n});\n\n\n","import React, {useCallback, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../App/store\";\nimport {addTodolistTC, fetchTodolistsTC, TodolistDomainType} from \"./todolists-reducer\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\nimport {Todolist} from \"./Todolist/Todolist\";\nimport {Redirect} from \"react-router-dom\";\n\nexport const TodolistsList: React.FC = () => {\n\n   const dispatch = useDispatch();\n   const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists);\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n\n   useEffect(() => {\n      if (!isLoggedIn) {\n         return\n      }\n      dispatch(fetchTodolistsTC());\n      // eslint-disable-next-line\n   }, [isLoggedIn]);\n\n   const addTodoListForm = useCallback((title: string) => {\n      const action = addTodolistTC(title)\n      dispatch(action);\n   }, [dispatch]);\n\n   if (!isLoggedIn) {\n      return <Redirect to={'/login'}/>\n   }\n\n   return (\n      <>\n         <Grid container style={{padding: '20px', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n            <Paper style={{padding: '10px'}}>\n               <AddItemForm addItem={addTodoListForm}/>\n            </Paper>\n         </Grid>\n         <Grid container spacing={5}>\n            {\n               todolists.map(tl => {\n                  return <Grid item key={tl.id}>\n                     <Paper elevation={3} style={{padding: '10px'}}>\n                        <Todolist\n                           key={tl.id}\n                           todolist={tl}\n                        />\n                     </Paper>\n                  </Grid>\n               })\n            }\n         </Grid>\n      </>\n   )\n}","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../App/store\";\nimport {setAppErrorAC} from \"../../App/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nexport const ErrorSnackbar = () => {\n   const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n   const dispatch = useDispatch();\n\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n      if (reason === 'clickaway') {\n         return;\n      }\n      dispatch(setAppErrorAC({error: null}))\n   };\n\n   const isOpen = error !== null\n\n   return (\n         <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n               {error}\n            </Alert>\n         </Snackbar>\n   );\n}\n","import React from 'react'\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../App/store\";\nimport {Redirect} from 'react-router-dom';\n\nexport const Login = React.memo(() => {\n\n   const dispatch = useDispatch();\n\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n   const formik = useFormik({\n      validate: (values) => {\n         if (!values.email) {\n            return {\n               email: 'Email is required'\n            }\n         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n            return {\n               email: 'Invalid email address'\n            }\n         }\n         if (!values.password) {\n            return {\n               password: 'Password is required'\n            }\n         }\n      },\n      initialValues: {\n         email: '',\n         password: '',\n         rememberMe: false,\n      },\n      onSubmit: values => {\n         dispatch(loginTC(values))\n      },\n   });\n\n   if (isLoggedIn) {\n      return <Redirect to={'/'}/>\n   }\n\n   return <Grid container justify=\"center\" alignItems=\"center\" style={{height: '80vh'}}>\n         <form onSubmit={formik.handleSubmit}\n               style={{backgroundColor: '#ffffff', padding: '20px', borderRadius: '10px'}}>\n            <FormControl>\n               <FormLabel style={{lineHeight: '24px', fontSize: '18px'}}>\n                  <p>To log in get registered\n                     <a href={'https://social-network.samuraijs.com/'}\n                        rel={'noreferrer'}\n                        target={'_blank'}> here\n                     </a>\n                  </p>\n                  <p>or use common test account credentials:</p>\n                  <p>Email: free@samuraijs.com</p>\n                  <p>Password: free</p>\n               </FormLabel>\n               <FormGroup>\n                  <TextField\n                     {...formik.getFieldProps('email')}\n                     error={!!formik.errors.email}\n                     label=\"Email\"\n                     margin=\"normal\"\n                  />\n                  {formik.errors.email ?\n                     <div style={{fontSize: '14px', color: 'red'}}>{formik.errors.email}</div> : null}\n                  <TextField\n                     {...formik.getFieldProps('password')}\n                     error={!!formik.errors.password}\n                     type=\"password\"\n                     label=\"Password\"\n                     margin=\"normal\"\n                  />\n                  {formik.errors.password ?\n                     <div style={{fontSize: '14px', color: 'red'}}>{formik.errors.password}</div> : null}\n                  <FormControlLabel\n                     label={'Remember me'}\n                     control={<Checkbox\n                        {...formik.getFieldProps('rememberMe')}\n                        checked={formik.values.rememberMe}\n                     />}\n                  />\n                  <Grid container justify=\"space-between\" style={{width: '100%', display: 'flex'}}>\n                     <Button style={{width: '220px'}} type={'submit'}\n                             variant={'contained'} color={'primary'}>Login</Button>\n                     <Button onClick={formik.handleReset} type={'reset'} variant={'contained'}\n                             color={'default'}>reset</Button>\n                  </Grid>\n               </FormGroup>\n            </FormControl>\n         </form>\n   </Grid>\n})\n\n","import React, {useEffect} from 'react';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {Header} from \"../components/Header/Header\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializedAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport './App.scss'\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\n\r\n\r\nexport const App = () => {\r\n\r\n   const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n   const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.initialized);\r\n   const dispatch = useDispatch();\r\n\r\n\r\n   useEffect(() => {\r\n      dispatch(initializedAppTC())\r\n      // eslint-disable-next-line\r\n   }, []);\r\n\r\n\r\n   if (!isInitialized) {\r\n      return <Container>\r\n         <Grid container justify={'center'} alignItems={'center'} style={{height: '100vh'}}>\r\n            <CircularProgress color={'secondary'} size={130}/>\r\n         </Grid>\r\n      </Container>\r\n   }\r\n\r\n   return (\r\n      <BrowserRouter>\r\n         <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <Header/>\r\n            <div className={'progress'}>\r\n               {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            </div>\r\n            <Container fixed>\r\n               <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n               <Route path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n         </div>\r\n      </BrowserRouter>\r\n   );\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./App/store\";\r\nimport {App} from \"./App/App\";\r\n\r\nReactDOM.render(\r\n   <Provider store={store}>\r\n      <App/>\r\n   </Provider>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}